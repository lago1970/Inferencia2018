##normalidade###
shapiro.test(modf12$residuals)
### teste breusch-pagan ###
bptest(modf12)
(vi<-vif(modf12))
######################################
#Análise de diagnóstico para o modelo:
modf14<-lm(y~x1+x4)
plot(modf14$fitted.values,modf14$residuals)
abline(h=0)
##normalidade
qqnorm(modf14$residuals)
qqline(modf14$residuals)
##Testes
##normalidade###
shapiro.test(modf14$residuals)
### teste breusch-pagan ###
bptest(modf14)
(vi<-vif(modf14))
##################Descrição dos dados#####################
#Dados relativos ao calor evoluído em calorias por grama
#de cimento (y) em função da quantidade de cada um dos
#quatro ingredientes na mistura:
#x1:aluminato tricálcio
#x2:silicato tricálcio
#x3:alumínio tetracálcio ferrite
#x4:silicato dicálcico
#y: caloria por grama de cimento
##########################################################
dados<-read.csv(file.choose(), header = TRUE)
y<-dados$y
x1<-dados$x1
x2<-dados$x2
x3<-dados$x3
x4<-dados$x4
n<-length(y)
###############################################################################################
#Análise de diagnóstico para o modelo:
modf412<-lm(y~x4+x1+x2)
summary(modf412)
plot(modf412$fitted.values,modf412$residuals)
abline(h=0)
identify(modf412$fitted.values,modf412$residuals)
##ou ainda
plot(x1,modf412$residuals)
abline(h=0)
plot(x2,modf412$residuals)
abline(h=0)
plot(x4,modf412$residuals)
abline(h=0)
x12=x1*x2
plot(x12,modf412$residuals)
abline(h=0)
plot(modf412$fitted.values,abs(modf412$residuals))
plot(modf412$residuals)
##normalidade
qqnorm(modf412$residuals)
qqline(modf412$residuals)
#Resíduo padronizado
resipad<-rstandard(modf412)
plot(modf412$fitted.values,resipad)
abline(h=0)
plot(modf412$fitted.values,modf412$residuals)
abline(h=0)
plot(modf412$fitted.values,resipad)
abline(h=0)
#Resíduo studentizado
stud<-rstudent(modf412)
plot(modf412$fitted.values,stud)
abline(h=0)
qqnorm(stud)
qqline(stud)
#Identificando observacoes influentes
medinflu<-influence.measures(modf412)
medinflu
indice<-c(1:n)
#identificando observações influentes em X
plot(indice,medinflu$infmat[,8], type = "b")
plot(indice,medinflu$infmat[,8])
#identificando observações influentes em X
plot(indice,medinflu$infmat[,8], type = "b")
#identificando observações influentes em X
plot(indice,medinflu$infmat[,8], type = "l")
identify(indice,medinflu$infmat[,8])
#Identificando observações influentes
plot(indice,medinflu$infmat[,1], type = "l")
identify(indice,medinflu$infmat[,1])
plot(indice,medinflu$infmat[,2], type = "l")
identify(indice,medinflu$infmat[,2])
plot(indice,medinflu$infmat[,3], type = "b")
identify(indice,medinflu$infmat[,3])
plot(indice,medinflu$infmat[,4], type = "l")
identify(indice,medinflu$infmat[,4])
plot(indice,medinflu$infmat[,5], type = "l")
identify(indice,medinflu$infmat[,5])
plot(indice,medinflu$infmat[,7], type = "l")
identify(indice,medinflu$infmat[,7])
medinflu
#Resíduo excluido
rexc<-modf412$residuals/(1-medinflu$infmat[,8])
plot(indice,rexc, type = "l")
identify(indice,rexc)
#Resíduo exluido studentizado
p<-4
SQRes<-anova(modf412)$'Sum Sq'[4]
ti<-(modf412$residuals)*(sqrt((n-p-2)/(SQRes*(1-medinflu$infmat[,8])-(modf412$residuals)^2)))
plot(indice,ti, type = "l")
identify(indice,ti)
##Testes
##normalidade###
shapiro.test(modf412$residuals)
### Homogeneidade de variância ####
require(lmtest)
#require(lawstat)
### teste breusch-pagan ###
bptest(modf412)
##Multicolinearidade##
require(car)
cor(dados)
(vi<-vif(modf412))
mean(vi)
##################Descrição dos dados#####################
#Dados relativos ao calor evoluído em calorias por grama
#de cimento (y) em função da quantidade de cada um dos
#quatro ingredientes na mistura:
#x1:aluminato tricálcio
#x2:silicato tricálcio
#x3:alumínio tetracálcio ferrite
#x4:silicato dicálcico
#y: caloria por grama de cimento
##########################################################
dados<-read.csv(file.choose(), header = TRUE)
y<-dados$y
x1<-dados$x1
x2<-dados$x2
x3<-dados$x3
x4<-dados$x4
n<-length(y)
###############################################################################################
#Análise de diagnóstico para o modelo:
modf412<-lm(y~x4+x1+x2)
plot(modf412$fitted.values,modf412$residuals)
abline(h=0)
identify(modf412$fitted.values,modf412$residuals)
##ou ainda
plot(x1,modf412$residuals)
plot(x2,modf412$residuals)
#Resíduo studentizado
stud<-rstudent(modf412)
plot(modf412$fitted.values,stud)
abline(h=0)
plot(stud)
qqnorm(stu)
qqnorm(stud)
qqline(stud)
#Identificando observacoes influentes
medinflu<-influence.measures(modf412)
indice<-c(1:n)
#identificando observações influentes em X
plot(indice,medinflu$infmat[,8], type = "b")
identify(indice,medinflu$infmat[,8])
#Identificando observações influentes
plot(indice,medinflu$infmat[,1], type = "l")
plot(indice,medinflu$infmat[,2], type = "l")
identify(indice,medinflu$infmat[,2])
plot(indice,medinflu$infmat[,3], type = "b")
plot(indice,medinflu$infmat[,4], type = "l")
plot(indice,medinflu$infmat[,5], type = "l")
plot(indice,medinflu$infmat[,7], type = "l")
#Resíduo excluido
rexc<-modf412$residuals/(1-medinflu$infmat[,8])
plot(indice,rexc)
plot(indice,rexc, type = "l")
#Resíduo exluido studentizado
p<-4
SQRes<-anova(modf412)$'Sum Sq'[4]
ti<-(modf412$residuals)*(sqrt((n-p-2)/(SQRes*(1-medinflu$infmat[,8])-(modf412$residuals)^2)))
plot(indice,ti)
plot(indice,ti, type = "l")
######################################
#Análise de diagnóstico para o modelo:
modf12<-lm(y~x1+x2)
plot(modf12$fitted.values,modf12$residuals)
abline(h=0)
##ou ainda
plot(x1,modf12$residuals)
plot(modf12$residuals)
##normalidade
qqnorm(modf12$residuals)
qqline(modf12$residuals)
#Resíduo studentizado
stud<-rstudent(modf12)
plot(modf12$fitted.values,stud)
abline(h=0)
plot(stud)
qqnorm(stud)
qqline(stud)
#Identificando observacoes influentes
medinflu<-influence.measures(modf12)
indice<-c(1:n)
?influence.measures
medinflu
#identificando observações influentes em X
plot(indice,medinflu$infmat[,7], type = "b")
identify(indice,medinflu$infmat[,7])
#Identificando observações influentes
plot(indice,medinflu$infmat[,1], type = "l")
plot(indice,medinflu$infmat[,2], type = "l")
plot(indice,medinflu$infmat[,3], type = "b")
plot(indice,medinflu$infmat[,4], type = "l")
identify(indice,medinflu$infmat[,4])
plot(indice,medinflu$infmat[,6], type = "l")
plot(indice,medinflu$infmat[,6], type = "l")
#Resíduo exluido studentizado
p<-2
SQRes<-anova(modf12)$'Sum Sq'[3]
ti<-(modf12$residuals)*(sqrt((n-p-2)/(SQRes*(1-medinflu$infmat[,7])-(modf12$residuals)^2)))
plot(indice,ti)
plot(indice,ti, type = "l")
##Testes
##normalidade###
shapiro.test(modf12$residuals)
### Homogeneidade de variância ####
require(lmtest)
### teste breusch-pagan ###
bptest(modf12)
##Multicolinearidade##
require(car)
(vi<-vif(modf12))
mean(vi)
######################################
#Análise de diagnóstico para o modelo:
modf14<-lm(y~x1+x4)
plot(modf14$fitted.values,modf14$residuals)
abline(h=0)
identify(modf14$fitted.values,modf14$residuals)
plot(modf14$residuals)
identify(modf14$residuals)
##normalidade
qqnorm(modf14$residuals)
qqline(modf14$residuals)
#Resíduo padronizado
resipad<-rstandard(modf14)
plot(modf14$fitted.values,resipad)
identify(modf14$fitted.values,resipad)
abline(h=0)
#Resíduo studentizado
stud<-rstudent(modf14)
plot(modf14$fitted.values,stud)
abline(h=0)
identify(modf14$fitted.values,stud)
##normalidade
qqnorm(stud)
qqline(stud)
#Identificando observacoes influentes
medinflu<-influence.measures(modf14)
indice<-c(1:n)
#identificando observações influentes em X
plot(indice,medinflu$infmat[,7], type = "b")
#Identificando observações influentes
plot(indice,medinflu$infmat[,1], type = "l")
plot(indice,medinflu$infmat[,2], type = "l")
plot(indice,medinflu$infmat[,3], type = "b")
plot(indice,medinflu$infmat[,4], type = "l")
plot(indice,medinflu$infmat[,6], type = "l")
medinflu
#Resíduo excluido
rexc<-modf14$residuals/(1-medinflu$infmat[,7])
plot(indice,rexc)
plot(indice,rexc, type = "l")
#Resíduo exluido studentizado
p<-2
SQRes<-anova(modf14)$'Sum Sq'[3]
ti<-(modf14$residuals)*(sqrt((n-p-2)/(SQRes*(1-medinflu$infmat[,7])-(modf14$residuals)^2)))
plot(indice,ti, type = "l")
##Testes
##normalidade###
shapiro.test(modf14$residuals)
### teste breusch-pagan ###
bptest(modf14)
(vi<-vif(modf14))
#Identificando observacoes influentes
medinflu<-influence.measures(modf12)
medinflu
dados<-read.csv(file.choose(), header = TRUE)
y<-dados$y
x1<-dados$x1
x2<-dados$x2
x3<-dados$x3
x4<-dados$x4
x5<-dados$x5
x6<-dados$x6
x7<-dados$x7
x8<-dados$x8
n<-length(y)
hist(y)
modcomp<-lm(y~x1+x2+x3+x4+x5+x6+x7+x8)
modcomp<-lm(y~x1+x2+x3+x4+x5+x6+x7+x8)
###############################
require(MASS)
#windows()
#par(mfrow = c(1, 2))
boxcox(modcomp, lambda = seq(-0.3, 0.7, by = 0.01))
summary(modcomp)
plot(modcomp$fitted.values,modcomp$residuals)
abline(h=0)
identify(modcomp$fitted.values,modcomp$residuals)
plot(x1,modcomp$residuals)
abline(h=0)
plot(x2,modcomp$residuals)
abline(h=0)
plot(x3,modcomp$residuals)
abline(h=0)
plot(x4,modcomp$residuals)
abline(h=0)
plot(x5,modcomp$residuals)
abline(h=0)
plot(modcomp$residuals)
identify(modcomp$residuals)
qqnorm(modcomp$residuals)
qqline(modcomp$residuals)
##Testes
##normalidade###
shapiro.test(modcomp$residuals)
#require(lawstat)
### teste breusch-pagan ###
bptest(modcomp)
##Multicolinearidade##
require(car)
(vi<-vif(modcomp))
qqnorm(modcomp$residuals)
qqline(modcomp$residuals)
##Testes
##normalidade###
shapiro.test(modcomp$residuals)
(vi<-vif(modcomp))
cor(dados)
yl<-log(y)
hist(yl)
dad<-data.frame(cbind(x1,x2,x3,x4,x5,x6,x7,x8,yl))
cor(dad)
modcompTl<-lm(yl~x1+x2+x3+x4+x5+x6+x7+x8)
summary(modcompTl)
plot(modcompTl$fitted.values,modcompTl$residuals)
abline(h=0)
plot(modcompTl$residuals)
qqnorm(modcompTl$residuals)
qqline(modcompTl$residuals)
##Testes
##normalidade###
shapiro.test(modcompTl$residuals)
### Homogeneidade de variância ####
### teste breusch-pagan ###
bptest(modcompTl)
##Multicolinearidade##
(vi<-vif(modcompTl))
(vi<-vif(modcomp))
###############################
boxcox(modcomp, lambda = seq(-0.3, 0.7, by = 0.01))
##Seleção de variaveis###
require(leaps)
sele1<-regsubsets(yl~.,data=dad,nbest=40) #total de 193 modelos
summary(sele1)
names(summary(sele1))
cbind(summary(sele1)$which, summary(sele1)$rsq,summary(sele1)$adjr2,summary(sele1)$cp,summary(sele1)$bic)
n_parametros<-as.numeric(rownames(summary(sele1)$which))+1
plot(n_parametros,summary(sele1)$rsq,xlab="N o de parâmetros",ylab="R^2")
plot(n_parametros,summary(sele1)$adjr2,xlab="N o de parâmetros",ylab="R^2 adj")
plot(n_parametros,summary(sele1)$cp,xlab="N o de parâmetros",ylab="Estatística Cp")
plot(n_parametros,summary(sele1)$bic,xlab="N o de parâmetros",ylab="BIC")
summary(sele1)$rsq
cbind(summary(sele1)$which, summary(sele1)$rsq)
sele1<-regsubsets(yl~.,data=dad)
sele1
cbind(summary(sele1)$which, summary(sele1)$rsq,summary(sele1)$adjr2,summary(sele1)$cp,summary(sele1)$bic)
sele1<-regsubsets(yl~.,data=dad,nbest=20)
cbind(summary(sele1)$which, summary(sele1)$rsq,summary(sele1)$adjr2,summary(sele1)$cp,summary(sele1)$bic)
sele1<-regsubsets(yl~.,data=dad,nbest=15) #nbest=40 total de 193 modelos
cbind(summary(sele1)$which, summary(sele1)$rsq,summary(sele1)$adjr2,summary(sele1)$cp,summary(sele1)$bic)
sele1<-regsubsets(yl~.,data=dad,nbest=10) #nbest=40 total de 193 modelos
cbind(summary(sele1)$which, summary(sele1)$rsq,summary(sele1)$adjr2,summary(sele1)$cp,summary(sele1)$bic)
##Forward##
modmin<-lm(yl ~ 1, data=dad)
step(modmin, direction='forward', scope=( ~ x1+x2+x3+x4+x5+x6+x7+x8))
##Backward##
modcompl<-lm(yl~ x1+x2+x3+x4+x5+x6+x7+x8)
step(modcompl, direction = 'backward')
modback<-lm(yl~x1+x2+x3+x5+x6+x8)
summary(modback)
##Stepwise##
step(modmin, scope=list(lower=modmin, upper=modcompl), direction="both")
##Stepwise##
step(modmin, scope=list(lower=modmin, upper=modcompl), direction="both")
mod1<-lm(yl~x1+x2+x3+x8)
mod2<-lm(yl~x1+x2+x3+x5+x8)
mod3<-lm(yl~x1+x2+x3+x6+x8)
suma
summary(mod1)
summary(mod2)
summary(mod3)
plot(mod1$fitted.values,mod1$residuals)
abline(h=0)
identify(mod1$fitted.values,mod1$residuals)
plot(mod1$residuals)
identify(mod1$residuals)
##normalidade
qqnorm(mod1$residuals)
qqline(mod1$residuals)
shapiro.test(mod1)
shapiro.test(mod1$residuals)
shapiro.test(mod2$residuals)
shapiro.test(mod3$residuals)
shapiro.test(mod4$residuals)
mod4<-lm(yl~x1+x2+x3+x5+x6+x8)
shapiro.test(mod4$residuals)
### Homogeneidade de variância ####
require(lmtest)
bptest(mod1)
bptest(mod2)
bptest(mod3)
bptest(mod4)
vif(mod1)
vif(mod2)
vif(mod3)
vif(mod4)
dados<-read.csv(file.choose(), header = TRUE)
cor(dados)
y<-dados$y
x1<-dados$x1
x2<-dados$x2
x3<-dados$x3
x4<-dados$x4
xx2<-x2-mean(x2)
xx4<-x4-mean(x4)
cor(xx2,xx4)
xxt2<-(x2-mean(x2))/sd(x2)
xxt4<-(x4-mean(x4))/sd(x4)
cor(xxt2,xxt4)
n<-length(y)
xxt2<-(1/sqrt(n-1))*(x2-mean(x2))/sd(x2)
xxt4<-(1/sqrt(n-1))*(x4-mean(x4))/sd(x4)
cor(xxt2,xxt4)
mod124<-lm(y~x1+x2+x4)
summary(mod124)
modx124<-lm(y~x1+xx2+xx4)
summary(modx124)
modxt124<-lm(y~x1+xxt2+xxt4)
summary(modxt124)
?lm
modxt124<-lm(y~x1+xxt2+xxt4 -1) # acho que tem que retirar o intercepto
summary(modxt124)
require(car)
##################Descrição dos dados#####################
#Dados relativos ao calor evoluído em calorias por grama
#de cimento (y) em função da quantidade de cada um dos
#quatro ingredientes na mistura:
#x1:aluminato tricálcio
#x2:silicato tricálcio
#x3:alumínio tetracálcio ferrite
#x4:silicato dicálcico
#y: caloria por grama de cimento
##########################################################
dados<-read.csv(file.choose(), header = TRUE)
y<-dados$y
x1<-dados$x1
x2<-dados$x2
x3<-dados$x3
x4<-dados$x4
n<-length(y)
mod124<-lm(y~x1+x2+x4)
summary(mod124)
require(car)
vi<-vif(mod124)
vi
xx2<-x2-mean(x2)
xx4<-x4-mean(x4)
modx124<-lm(y~x1+xx2+xx4)
summary(modx124)
vif(modx124)
xxt2<-(1/sqrt(n-1))*(x2-mean(x2))/sd(x2)
xxt4<-(1/sqrt(n-1))*(x4-mean(x4))/sd(x4)
modxt124<-lm(y~x1+xxt2+xxt4 -1) # retirar o intercepto
vif(modxt124)
summary(modxt124)
summary(mod124)
yt<-(1/sqrt(n-1))*(y-mean(y))/sd(y)
x1t<-(1/sqrt(n-1))*(x1-mean(x1))/sd(x1)
modtc124<-lm(yt~x1t+xxt2+xxt4 -1) # retirar o intercepto
summary(modtc124)
vif(modtc124)
summary(modtc124)
summary(mod124)
require(knitr)
knitr::opts_chunk$set(echo = FALSE)
gyn <- read.csv("https://raw.githubusercontent.com/cursoRunb/Inferencia2018/master/Aula4/climaGyn.csv")
setwd("~/Dropbox/AAAUNB/Extensao/ENAP/InferenciaOutubro2018/materiais/Aula4")
dados <- read.csv("climaBsb.csv")
names(dados)
plot(dados$umid_inst, dados$temp_inst)
summary(lm(temp_inst ~ umid_inst, dados))
summary(lm( umid_inst ~ temp_inst, dados))
plot(dados)
names(dados)
mod <- (lm( umid_inst ~ temp_inst, dados))
hist(mod$residuals)
mod <- (lm( umid_inst ~ temp_inst + vento_vel, dados))
summary(mod)
mod <- (lm( temp_inst ~ umid_inst + vento_vel, dados))
summary(mod)
names(dados)
mod <- (lm( temp_inst ~., dados[,-c(1:4)]))
summary(mod)
